// fibonacci_O3.s - ассемблерный код функции fibonacci с оптимизацией O3

// Указывает на исходный файл, из которого был сгенерирован ассемблерный код.
    .file    "fibonacci.cpp"

// Секция исполняемого кода (начало)
    .text
    .p2align 4                      // Выравнивание кода на 16 байт для оптимизации

// Объявление функции _Z9fibonaccii (декорированное имя для int fibonacci(int))
    .globl    _Z9fibonaccii
    .def    _Z9fibonaccii;    .scl    2;    .type    32;    .endef
    .seh_proc    _Z9fibonaccii       // Директива для обработки исключений (SEH)
_Z9fibonaccii:
.LFB0:                              // Начало функции
    .seh_endprologue                // Конец пролога SEH

    xorl    %eax, %eax              // Обнуление регистра eax (подготовка возвращаемого значения)
    testl   %ecx, %ecx              // Проверка входного аргумента (n): if (n == 0)
    je      .L1                      // Если n == 0, то возвращается 0

    movl    $1, %eax                // Установка eax = 1 (базовый случай: возврат 1 при n = 1)
    cmpl    $1, %ecx                // Сравнение n с 1: if (n <= 1)
    jle     .L1                     // Если n <= 1 (уже обработано в eax)

    addl    $1, %ecx                // ecx = n + 1 (корректировка для условия цикла)
    movl    $2, %edx                // Инициализация счетчика цикла (edx = 2, т.к. первые два числа уже обработаны)
    xorl    %r8d, %r8d              // Обнуление r8d (хранение fib(i-2), начальное значение: fib(0) = 0)

    .p2align 4,,10                  // Выравнивание цикла для оптимизации кэша процессора
    .p2align 3                      // Дополнительное выравнивание (8 байт)
.L3:                                // НАЧАЛО ЦИКЛА ВЫЧИСЛЕНИЯ FIBONACCI
    movq    %rax, %r9              // Сохранить текущее значение fib(i-1) во временный регистр r9
    addl    $1, %edx               // Увеличить счетчик цикла: i += 1
    addq    %r8, %rax              // Вычислить fib(i) = fib(i-1) (rax) + fib(i-2) (r8)
    movq    %r9, %r8               // Обновить fib(i-2): r8 = предыдущее fib(i-1) (из r9)
    cmpl    %ecx, %edx             // Сравнить счетчик (edx) с n+1 (ecx)
    jne     .L3                     // Повторить цикл, если i != n+1

.L1:                                // МЕТКА ВОЗВРАТА РЕЗУЛЬТАТА
    ret                            // Возврат значения из rax
    .seh_endproc                   // Конец SEH-блока

// Информация о компиляторе
    .ident    "GCC: (MinGW-W64 x86_64-ucrt-posix-seh, built by Brecht Sanders, r5) 13.2.0"